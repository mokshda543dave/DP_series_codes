bool solve(int lastindex,int currindex,vector<int> stones,vector<vector<int>>& dp)    //since lastjump TLE create krega kuki newjumplen=jumplen(>0)+stones[pos] but stones[pos] ki max value 2^31-1 h or jumplen hmesha >0 hi hoga to newjumplen to 2^31 > INT_MAX (hence will give Memory limit exceed MLE)
{
    if(currindex==stones.size()-1) return true;
    if(dp[lastindex][currindex]!=-1)  //already exists
   return dp[lastindex][currindex];
   int jumplen=stones[currindex]-stones[lastindex];  // phle jumplen or stone[pos] agar same h to further all calls k lie same ans aega to ye dp me lie but jumplen MLE dega but agar last or currindex in stone bhi to mujhe jumplen dedega without any MLE kuki fir dp[n][n] lenge where n=stones.size() to is alag tarike se solve hua ye que  
    for(int j=-1;j<=1;j++)
    {
        int newjumplen=jumplen+j;
        if(newjumplen>0)
        {
            auto it=find(stones.begin(),stones.end(),stones[currindex]+newjumplen);
            if(it!=stones.end()) //value exists
                if(solve(currindex,it-stones.begin(),stones,dp)) return dp[lastindex][currindex]=1;   //return true krne k bjae store krao dp array me; 
        }
    }
        return dp[lastindex][currindex]=0;  //return false krne k bjae store krao dp array me;
}

    bool canCross(vector<int>& stones) 
    {
        vector<vector<int> > dp(stones.size(),vector<int> (stones.size(),-1));
        return solve(0,0,stones,dp);
    }
